{
  "hash": "284ada449dff613965a3885d36570e79",
  "result": {
    "engine": "knitr",
    "markdown": "# Kontrola wersji (1)\n\n<!-- update printscreens? -->\n\nSystemy kontroli wersji to narzędzia pozwalające na zapamiętywaniu zmian zachodzących w plikach.\nDzięki nim możemy sprawdzić nie tylko kiedy zmieniliśmy dany plik i kto go zmienił, ale co najważniejsze - możemy linia po linii prześledzić zmiany wewnątrz tego pliku.\nDodatkowo, mamy możliwość przywracania wersji pliku z wybranego czasu w całej historii jego zmian.\n\nSystemy kontroli wersji są bardzo powszechnie wykorzystywane przy tworzeniu wszelakiego rodzaju oprogramowania.\nWynika to nie tylko z ich zalet wymienionych powyżej, ale również rozbudowanych możliwości pozwalających na zorganizowaną współpracę wielu osób nad jednym projektem.\n\nIstnieje wiele systemów kontroli wersji różniących się zarówno używaną terminologią, sposobem działania czy możliwościami.^[<https://en.wikipedia.org/wiki/Comparison_of_version-control_software#History_and_adoption>]\nWspółcześnie najbardziej popularnym systemem kontroli jest Git, a inne popularne systemy kontroli wersji to Concurrent Versions System (CVS), Mercurial czy Subversion (SVN).\n\n## System Git\n\nSystem Git jest niezależny od języka (lub języków) programowania, które używamy.\nJego działanie oparte jest o system komend rozpoczynających się od słowa `git`, które należy wykonać w systemowym oknie konsoli.^[Nie w oknie konsoli R.]\nZrozumienie działania systemu Git wymaga także poznania kilku nowych terminów.\n\nSystem Git został zaprojektowany i jest używany głównie do kontroli wersji plików tekstowych.\nDzięki temu możemy w prosty sposób zobaczyć, co do linii kodu, w którym miejscu zaszła zmiana.\nDodatkowo przechowywanie plików tekstowych i ich zmian nie zajmuje dużo miejsca. \nMożliwe w systemie Git jest również przechowywanie kolejnych wersji plików binarnych (np. pliki dokumentów, arkusze kalkulacyjne, obrazki, itd.).\nW ich przypadku niestety nie można liczyć na dokładne sprawdzanie miejsc zmian, a także ich wielkość może powodować znaczne powiększanie się repozytorium.^[Między innymi z tego powodu internetowe serwisy kontroli wersji posiadają ograniczenia dotyczące wielkości plików. \nPrzykładowo, GitHub ogranicza wielkość pojedynczych plików do 100MB.]\n\n## GitHub\n\nGitHub jest serwisem internetowym pozwalającym na przechowywanie i interakcję z repozytoriami w systemie kontroli wersji Git.\nPosiada on dwa rodzaje repozytoriów - publiczne (ang. *public*), które może każdy zobaczyć oraz prywatne (ang. *private*) dostępne tylko dla osób z odpowiednimi uprawnieniami.\n\nRepozytoria połączone są z kontami użytkowników (np. <https://github.com/Nowosad> to moje konto, gdzie \"Nowosad\" oznacza nazwę użytkownika) lub organizacjami (np. <https://github.com/r-spatialecology> to konto organizacji \"r-spatialecology\").\nPod adresem <https://github.com/join> można założyć nowe konto użytkownika.\n\nGitHub może być używany do wielu celów, między innymi:\n\n- Przechowywanie kodu źródłowego\n- Tworzenie kopii zapasowych różnych wersji oprogramowania i innych plików tekstowych\n- Dzielnie się kodem z innymi\n- Współpraca nad kodem\n- Hosting statycznych stron internetowych i innych dokumentów\n- Hosting pakietów R\n- Odkrywanie i wykorzystywanie istniejących projektów\n- Śledzenie zmian w kodzie innych osób\n\nMożliwe jest również łączenie możliwości serwisu GitHub z innymi serwisami internetowymi, takimi jak [Codecov](https://codecov.io/), [Gitter](https://gitter.im/) i [wiele innych](https://github.com/marketplace).\n\n### Tworzenie zdanego repo\n\nPosiadanie konta użytkownika pozwala na, między innymi, tworzenie nowych repozytoriów i zarządzanie nimi.\nStworzenie nowego repozytorium odbywa się poprzez naciśnięcie zielonej ikony.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ikona tworzenia nowego repozytorium GitHub.](figs/gh-new-repo.png){#fig-gh-new-repo width=80%}\n:::\n:::\n\n\n\n\n\n\nW kolejnym oknie należy podać nazwę nowego repozytorium oraz wybrać czy będzie ono publiczne czy prywatne. \nDodatkowo możliwe jest dodanie opisu repozytorium (ang. *description*), pliku README, czy licencji.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Okno tworzenia nowego repozytorium GitHub.](figs/gh-new-repo2.png){#fig-gh-new-repo2 width=80%}\n:::\n:::\n\n\n\n\n\n\nPo wybraniu potwierdzenia (*Create repository*) utworzone zostanie nowe, puste repozytorium.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Nowe, puste repozytorium GitHub.](figs/gh-new-repo3.png){#fig-gh-new-repo3 width=80%}\n:::\n:::\n\n\n\n\n\n\nOkno pustego repozytorium przedstawia cztery główne drogi pozwalające na dodanie zawartości:\n\n1. Szybka konfiguracja - tutaj podane są dwie możliwe ścieżki do zdalnego repozytorium. \nPierwsza z nich to adres HTTPS a druga to adres SSH.\nW sekcji zostanie wyjaśnione jak korzystać z szybkiej konfiguracji.\n2. Stworzenie nowego repozytorium używając linii komend. \nJest to używane w sytuacjach, gdy lokalna wersja repozytorium jeszcze nie istnieje.\nW tej sytuacji (1) tworzony jest nowy plik tekstowy `README.md`, (2) obecny katalog jest określany jako repozytorium Git, (3) plik `README.md` jest dodawany do repozytorium, (4) dodanie tego pliku jest zatwierdzone wraz z wiadomością `\"first commit\", (5) dodana jest ścieżka do zdalnego repozytorium, (6) następuje wysłanie zmian z lokalnego do zdalnego repozytorium.\n3. Wysłanie zmian z istniejącego repozytorium.\nTa opcja przydaje się, gdy mamy już istniejące lokalne repozytorium, ale do którego nie ma jeszcze zdalnego repozytorium. \nTutaj następuje tylko (1) dodanie ścieżki do zdalnego repozytorium oraz (2) wysłanie zmian z lokalnego do zdalnego repozytorium.\n4. Import kodu z innego systemu kontroli wersji niż Git.\n\n### Repozytorium GitHub\n\nWygląd okna repozytorium zmienia się po dodaniu pierwszej zawartości.\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Repozytorium GitHub po dodaniu zawartości.](figs/gh-new-repo4.png){#fig-gh-new-repo4 width=80%}\n:::\n:::\n\n\n\n\n\n\nTeraz możliwe jest podejrzenie występujących tam plików (w tym momencie jedynie plik `README.md`), zmian jakie zaszły w repozytorium (klikając na *commit*), istniejących rozgałęzień (klikając na *branch*) oraz wiele innych.\nPod zieloną ikoną *Clone or download* można dodatkowo znaleźć ścieżkę do tego zdalnego repozytorium. \n\n### Dodatkowe możliwości GitHub\n\nW prawym górnym rogu okna repozytorium znajdują się trzy ikony - *Watch*, *Star*, *Fork*.\nPierwsza z nich pozwala na określenie czy chcemy dostawać powiadomienia na temat dyskusji prowadzonych wewnątrz danego repozytorium, takich jak utworzenie nowej sprawy.\nDruga ikona pozwala na oznaczanie interesujących repozytoriów i przez to ułatwiająca znajdowania podobnych projektów.\nOstatnia ikona *Fork* oznacza w tym kontekście rozwidlenie.\nPo jej kliknięciu następuje utworzenie kopii repozytorium innego użytkownika do naszego konta.\n\nOprócz dostępu do kodu i jego zmian, GitHub oferuje także szereg dodatkowych możliwości.\nObejmuje to, między innymi, automatyczne wyświetlanie plików README, śledzenie spraw (ang. *issue tracking*), zapytania aktualizacyjne (ang. *pull request*), wizualizacje zmian, czy nawet tworzenie stron internetowych.\nWięcej o tych możliwościach dowiecie się później.\n\n::: {.callout-note appearance=\"simple\"}\n\n## ZADANIA\n\n1. Zaloguj się platformy GitHub.\nPrzejrzyj jej interfejs -- czy rozumiesz co tam się znajduje? \nW razie wątpliwości -- pytaj.\n2. Załóż nowe repozytorium na GitHubie o dowolnej nazwie.\n3. Z poziomu platformy GitHub dodaj nowy plik `README.md` do repozytorium, w którym podasz nazwę repozytorium oraz swoje imię i nazwisko.\n4. Pobierz wersję `.zip` repozytorium i rozpakuj ją na swoim komputerze.\n\n:::\n\n## Konfiguracja systemu Git\n\nKolejnym krokiem po instalacji systemu Git^[Instrukcje dotyczące instalacji Gita znajdują się we wstępie książki.] jest jego konfiguracja. \nMożna ją wykonać używając wbudowanego terminala (Mac OS i Linux) lub terminala dodanego podczas instalacji systemu Git (Windows).\nPolega ona na podaniu nazwy użytkownika (np. `\"Imie Nazwisko\"`) oraz jego adresu email (`\"email@portal.com\"`).\n\n```bash\ngit config --global user.name \"imie nazwisko\"\ngit config --global user.email \"email\"\n```\n\nPodany adres email powinien być zgodny z tym, który został użyty podczas rejestracji na serwisie GitHub.\n\nGdy już posiadamy konto na GitHubie oraz repozytorium, przychodzi czas na połączenie go z naszym komputerem.\nMusimy do tego celu stworzyć a następnie dodać do naszego komputera tzw. GitHub Token.\nMa to miejsce na stronie <https://github.com/settings/tokens>, gdzie należy:\n\n1. Kliknąć przycisk *Generate new token*.\n2. Nadać nazwę tokenowi.^[U mnie to często nazwa komputera na którym pracuję.]\n3. Zaznaczyć opcje. [Rekomendowane](https://happygitwithr.com/https-pat#tldr) to \"repo\", \"user\" i \"workflow\".\n4. Kliknąć przycisk *Generate token*.\n\nW efekcie zostanie wygenerowany token, który należy skopiować i zapisać w bezpiecznym miejscu.^[Można też użyć funkcji `usethis::create_github_token()`.]\n\nMożliwy jest system pracy, w którym podajemy token za każdym razem, gdy chcemy się połączyć z repozytorium GitHub.\nDużo jednak wygodniejszym rozwiązaniem jest dodanie tokena na lokalnym komputerze.\nW tym celu najlepiej użyć funkcji `gitcreds::gitcreds_set()`.\n\n::: {.callout-note}\nAlternatywnym sposobem połączenia repozytorium z komputerem jest wykorzystanie kluczy SSH.\nW tym celu należy wygenerować klucze SSH, a następnie dodać klucz publiczny do konta na GitHubie.\nWięcej informacji można znaleźć na stronie <https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh>.\n:::\n\n## Kontrola wersji w RStudio {#rstudio-git}\n\nRStudio posiada wbudowane, uproszczone graficzne wsparcie dla systemu Git.\nIstnieje też szereg programów, których głównym celem jest ułatwienie pracy z systemem Git.\nNazwane są one klientami Git, wśród których można wymienić [GitKraken](https://www.gitkraken.com/) i [Sourcetree](https://www.sourcetreeapp.com/).^[Więcej klientów Git można znaleźć na stronie <https://git-scm.com/downloads/guis>.]\n\nNajprostszym sposobem połączenia RStudio z systemem Git i serwisem GitHub jest stworzenie nowego projektu:\n\n1. Kliknąć `File -> New Project`.\n2. Wybrać `Version Control`.\n3. Wybrać `Git`.\n4. Podać ścieżkę do zdalnego repozytorium (adres HTTPS lub SSH, w zależności od sposobu wybranego wcześniej) oraz wybrać miejsce na dysku, gdzie ma się ten projekt znajdować.\n5. Kliknąć `Create Project`.\n\nW efekcie zostanie utworzony nowy projekt RStudio (w tle wykonywane jest pobranie kopii istniejącego zdalnego repo), który jednocześnie jest lokalnym repozytorium Git. \nDodatkowo, w RStudio pojawi się nowy panel \"Git\".\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Panel Git w RStudio.](figs/rstudio-git.png){width=80%}\n:::\n:::\n\n\n\n\n\n\nW tym panelu są wyświetlone (1) wszystkie pliki, które są w folderze projektu, ale nie w repozytorium Git (żółte ikony statusu), (2) pliki, które chcemy dodać do repozytorium (zielona ikona statusu), oraz (3) pliki, które są już w repozytorium, ale zostały zmodyfikowane (niebieska ikona statusu).^[Możliwe są też inne sytuacje, np. czerwona ikona z literą R sugerująca zmianę nazwy pliku.]\nTen panel nie pokazuje plików, które nie zostały ostatnio zmienione.\nPierwsza kolumna w tym panelu (*Staged*) domyślnie zawiera same nieodhaczone białe pola.\nWybór tego pola (jego odhaczenie) jest równoznaczne z dodaniem zmian.\n\nDodatkowo nad listą plików znajduje się szereg ikon.\nPierwsze dwie z nich (*Diff* i *Commit*) wyświetlają okno, które pozwala sprawdzić jakie zmiany zaszły w plikach od ostatniego ich dodania (dolny panel) oraz zatwierdzić zmiany (prawy panel).\nKolejne, strzałki w dół i górę, oznaczają odpowiednio aktualizowanie zmian i wysyłanie zmian.\nIkona zegarka otwiera nowe okno, w którym można zobaczyć jakie zmiany zaszły w kolejnych zatwierdzeniach zmian (tak zwanych *commitach*).\nNastępne ikony pozwalają na określenie plików do ignorowania (ikona koła zębatego) oraz tworzenie nowych rozgałęzień.\nPrzedostatni element tego okna to nazwa obecnie ustawionego rozgałęzienia, a po kliknięciu tej nazwy możliwa jest przejście do innego rozgałęzienia.\n\n## Sposoby pracy z systemem Git\n\nIstnieje wiele możliwych sposobów pracy z systemem Git. \nZależą one od wielu czynników, takich jak planowany cel repozytorium czy wykorzystywana technologia. \nDodatkowo znaczny wpływ na sposób pracy z systemem Git ma czynnik ludzki - przyzwyczajenia osób pracujących nad projektem i ich preferencje.\nPoniżej pokażę dwa podstawowe sposoby pracy, a bardziej zaawansowane podejścia zostaną omówione w kolejnych rozdziałach.\n\n### Nowy projekt {#sec-nowy-projekt}\n\nPreferowanym^[Przeze mnie] sposobem rozpoczęcia pracy nad nowym zadaniem (projektem) w R jest stworzenie nowego, pustego repozytorium w serwisie GitHub, a następnie połączenie z nim nowego projektu RStudio.\n\n\n\n\n\n\n```{mermaid}\n%%| fig-width: 6\nflowchart LR\n  A(GitHub) --> B(RStudio -- nowy projekt)\n  B --> C>Naniesienie zmian]\n  C --> D[Staged]\n  D --> E[Commit]\n  E --> F[Push]\n```\n\n\n\n\n\n\nW momencie, gdy posiadamy ustawione zarówno lokalne jak i zdalne repozytorium możliwe jest rozpoczęcie pracy.\nTeraz można tworzyć nowe oraz edytować istniejące pliki.\nTutaj zalecane jest najpierw kliknięcie ikony aktualizowania zmian (strzałka w dół), aby upewnić się, że posiadamy aktualną wersję repozytorium.\nPo każdej wyraźnej zmianie plików (np. ulepszenie kodu, naprawa błędów, dodanie nowych możliwości) należy dodać zmiany oraz je zatwierdzić.\nMożna to zrobić klikając pole *Staged* przy wybranych plikach oraz następnie ikonę *Commit*. \nTeraz można dodać wiadomość opisująca zmiany jakie zaszły, oraz ją zatwierdzić klikając przycisk *Commit*.\n\n<!-- https://chris.beams.io/posts/git-commit/ -->\n<!-- https://thoughtbot.com/blog/5-useful-tips-for-a-better-commit-message -->\n<!-- https://github.com/erlang/otp/wiki/writing-good-commit-messages -->\n<!-- https://code.likeagirl.io/useful-tips-for-writing-better-git-commit-messages-808770609503 -->\n<!-- HEAD -->\n<!-- komity powinny być małe: łatwe do zrozumienia, łatwe do przetestowania, łatwe do cofnięcia -->\n<!-- komity jak maile: pierwsza linia to tytul; reszta to tresc -- https://www.conventionalcommits.org/en/v1.0.0/ -->\n\n<!-- ::: {.callout-note} -->\n<!-- wyjaśnij jak pisać komity -->\n<!-- minimal but complete -->\n<!-- Zalecane jest, aby powyższą czynność wykonywać nawet wiele razy dziennie. -->\n<!-- ::: -->\n\nEfektem powyższej operacji jest posiadanie zatwierdzonych zmian w lokalnym repozytorium, ale jeszcze ich brak w repozytorium zdalnym.\nKolejnym krokiem jest przesłanie zmian na zdalne repozytorium poprzez kliknięcie ikony wysyłania zmian (strzałka w górę).\nJeżeli wszystko poszło zgodnie z planem, nowa wersja repozytorium powinna pojawić się na odpowiedniej stronie serwisu GitHub.\nTą czynność warto wykonywać rzadziej niż poprzednią, ale też regularnie.\n\n::: {.callout-note}\nCzęsto w folderze projektu możesz posiadać pliki, których nie chcesz dodawać do repozytorium.\nW takiej sytuacji dodaj ich nazwy do pliku `.gitignore` i staną się one niewidoczne dla systemu Git.\n:::\n\nDalej praca polega na powtarzaniu tych czynności:\n\n1. Sprawdzenie czy posiadamy aktualną wersję repozytorium.\n2. Edycja/dodanie plików czy folderów.\n3. Dodanie zmian.\n4. Zatwierdzenie zmian.\n5. Wysyłanie zmian na zdalne repozytorium.\n\n\n\n\n\n\n```{mermaid}\n%%| fig-width: 6\nflowchart LR\n  A[\"Sprawdzenie<br>aktualności<br>repo<br>(git pull)\"] --> B>Edycja/dodanie<br>plików]\n  B --> C[\"Dodanie<br>zmian<br>(git add)\"]\n  C --> D[\"Zatwierdzenie<br>zmian<br>(git commit)\"]\n  D --> E[\"Wysyłanie<br>zmian<br>na zdalne<br>repozytorium<br>(git push)\"]\n```\n\n\n\n\n\n\n### Istniejący projekt {#istniejacy-projekt}\n\nCzasami posiadasz już jakiś istniejący projekt (folder z kodem źródłowym, itd.), ale chcesz do niego dodać możliwości kontroli wersji.\nW takich przypadkach najprostszy sposób to stworzenie nowego repozytorium w serwisie GitHub oraz pustego, połączonego z nim nowego projektu RStudio.\nNastępnie należy przekopiować do tego projektu wszystkie już istniejące pliki, dodać je (pole *Staged*), zatwierdzić oraz przesłać na zdalne repozytorium.\nKolejne etapy pracy wyglądają identycznie jak w poprzedniej sekcji.^[Możliwe jest też dodanie systemu kontroli wersji do istniejącego projektu oraz przypisanie do niego zdalnego repozytorium, ale wymaga to większej wiedzy na temat systemu Git.]\n\n::: {.callout-note appearance=\"simple\"}\n\n## ZADANIA\n\n1. Dobierzcie się w dwuosobowe grupy.\n2. Celem pierwszej osoby jest stworzenie nowego repozytorium na GitHubie, połączenie go z nowym projektem RStudio, dodanie nowego pliku `README.md` do repozytorium zawierającego tytuł wiersza \"Słoń Trabalski\", oraz przesłanie go na zdalne repozytorium.\n3. Pierwsza osoba następnie dodaje uprawnienia do repozytorium dla drugiej osoby.\n4. Druga osoba łączy się z repozytorium, dodaje do pliku `README.md` pierwszą linię wiersza  (<https://wolnelektury.pl/katalog/lektura/tuwim-slon-trabalski.html>), zatwierdza zmiany oraz przesyła je na zdalne repozytorium.\n:::\n\n## Problemy z kontrolą wersji {#sec-problemy-git1}\n\nW ramach jednego projektu często posiadamy wiele plików z długą historią zmian, do tego nanoszonych przez szereg różnych osób.\nJest to sytuacja w której dość prosto o wystąpienie problemów czy nieoczekiwanych (przez użytkownika) zachowań systemu kontroli wersji Git.\n\nJednym z najczęstszych problemów jest pojawienie się poniższego komunikatu podczas próby wysyłania zmian do zdalnego repozytorium.\n\n<!-- check!!! -->\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n>>> git push\nTo https://github.com/YOU/REPO.git\n ! [rejected]        main -> main (fetch first)\nerror: failed to push some refs to 'https://github.com/YOU/REPO.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n:::\n\n\n\n\n\n\nOznacza on, że w repozytorium zdalnym są jakieś zmiany, których nie ma lokalnie.\n<!-- push rejection -->\nPrawdopodobnie wynikają one z kwestii, że inna osoba przesłała swoje zmiany do zdalnego repozytorium lub też pliki były zmienione i przesłane przez ciebie na innym komputerze.\nNajczęściej w takiej sytuacji wystarczy aktualizowanie zmian ze zdalnego repo (ikona strzałki w dół), a następnie ponowienie próby wysłania zmian.\nCzasem jednak mogły zajść zmiany w tym samym pliku edytowanym przez wiele osób.\nWówczas konieczne jest ręczne poprawienie problematycznych plików, dodanie zmian i ich zatwierdzenie.\n\n::: {.callout-note appearance=\"simple\"}\n\n## ZADANIA\n\n1. Kontynuujcie pracę w dwuosobowych grupach. \n2. Tym razem zarówno pierwsza, jak i druga osoba mają edytować plik `README.md`: pierwsza dodaje drugą linię wiersza, a druga trzecią.\n3. Następnie najpierw pierwsza osoba przesyła zmiany na zdalne repozytorium, a potem druga osoba próbuje to zrobić.\n4. Rozwiążcie problem, który się pojawił.\n\n*Po wykonaniu zadań będziemy mieć czas na dyskusję i pomoc.*\n:::\n\n::: {.callout-note}\nGitHub nie jest jedynym serwisem internetowym oferującym hosting repozytoriów Git.\nInnymi popularnymi serwisami są [GitLab](https://about.gitlab.com/) i [Bitbucket](https://bitbucket.org/).\nKażdy z nich oparty jest na podobnych zasadach działania, ale różni się wieloma szczegółami.\nDodatkowo możliwe jest [stworzenie własnego hostingu repozytoriów Git](https://about.gitlab.com/install/), ale wymaga to większej wiedzy technicznej.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}