{
  "hash": "fc8ff434ee363d7722a63cc003b19ac6",
  "result": {
    "engine": "knitr",
    "markdown": "# Tworzenie pakietów R (1) {#tworzenie-pakietow}\n\n## Pakiety R\n\nPakiet to zorganizowany zbiór funkcji, który rozszerza możliwości R.\nPakiety oprócz kodu zawierają szereg dodatkowych istotnych elementów, takich jak:\n\n- Informacja o wersji pakietu, jego twórcach, zależnościach, czy licencji\n- Dokumentacja\n- Przykładowe dane\n- Testy kodu\n\nPakiety R mogą być przechowywane i instalowane z wielu miejsc w internecie. \nIstnieje jednak centralne repozytorium (CRAN, ang. *the Comprehensive R Archive Network*), które zawiera oficjalne wersje pakietów R, np. <https://cran.r-project.org/package=stringr>.\nWersje deweloperskie (rozwojowe) często można znaleźć na platformie [GitHub](https://github.com/), np. <https://github.com/tidyverse/stringr/>.\n\nDo instalacji pakietu w R z repozytorium CRAN służy wbudowana funkcja `install.packages()`, np:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"stringr\") #instalacja pakietu stringr\n```\n:::\n\n\n\n\n\n\nZainstalowanie pakietu w R z platformy GitHub jest możliwe używając, np. funkcji `install_github()` z pakietu **remotes**.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\nremotes::install_github(\"tidyverse/stringr\")\n```\n:::\n\n\n\n\n\n\nW przypadku instalacji pakietu w R z platformy GitHub należy podać nazwę użytkownika lub organizacji, która tworzy ten pakiet (np. powyżej `tidyverse`) oraz nazwę pakietu (np. powyżej `stringr`) oddzielone znakiem `/`.\n\nPodobnie jak instalowanie programów na komputerze - zainstalowanie pakietu odbywa się tylko jeden raz.\n\n::: {.callout-note}\nIstnieją dwa główne formy, w których rozpowszechniane są pakiety R - postać źródłowa (ang. *source packages*) i postać binarna (ang. *binary packages*).\nPostać źródłowa zawiera kod źródłowy pakietu, który musi zostać następnie skompilowany na komputerze użytkownika.\nSkompilowanie pakietu na podstawie kodu źródłowego może wymagać posiadania odpowiednich bibliotek na komputerze, np. [Rtools](https://cran.r-project.org/bin/windows/Rtools/) dla systemu Windows.\nDodatkowo, instalacja w ten sposób zabiera więcej czasu.\nPostać binarna została już wcześniej skompilowana na zewnętrznym komputerze (np. w repozytorium CRAN)\nJest ona dostępna dla systemów Windows i Mac OS.\nNiestety, nie wszystkie pakiety (lub ich wersje) posiadają postać binarną i wymagana jest ich kompilacja.\n:::\n\nUżycie wybranego pakietu wymaga dołączenia go do R za pomocą funkcji `library()`.\nDołączenie wybranych pakietów do R robimy po każdym uruchomieniu R.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n\n\n\n\n\n::: {.callout-note}\nPakiet (ang. **package**) to zbiór funkcji, biblioteka (ang. **library**) to miejsce na dysku, w którym znajdują się pakiety.\n:::\n\nW przypadku, gdy chcemy użyć zewnętrznej funkcji, ale nie dołączyliśmy odpowiedniego pakietu, pojawi się błąd o treści `could not find function \"nazwa_funkcji\"`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_sub(\"chronologia\", start = 1, end = 6)\n#> Error in str_sub(\"chronologia\", start = 1, end = 6) : \n#>  could not find function \"str_sub\"\n```\n:::\n\n\n\n\n\n\nIstnieją dwa możliwe rozwiązania powyższego problemu.\nPo pierwsze możliwe jest dołączenie pakietu poprzez  `library(stringr)`.\nPo drugie można bezpośrednio zdefiniować z jakiego pakietu pochodzi konkretna funkcja używając nazwy pakietu i operatora `::`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_sub(\"chronologia\", start = 1, end = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"chrono\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.callout-note}\nOperator `::` może być też pomocny w przypadku, gdy kilka pakietów ma funkcję o tej samej nazwie.\nWówczas, aby kod został poprawnie wykonany, warto podać nie tylko nazwę funkcji ale też nazwę pakietu z jakiego ona pochodzi.\n:::\n\n<!-- CRAN Task Views -->\n\n## Nazwa pakietu\n\nNazwa nowego pakietu musi spełniać kilka wymagań: składać się tylko ze znaków [ASCII](https://en.wikipedia.org/wiki/ASCII), cyfr i kropek, mieć co najmniej dwa znaki oraz zaczynać się od litery i nie kończyć się kropką [@team1999writing]. \nWażne jest również myślenie o nazwie pakietu tak jak o nazwach funkcji -- nazwy pakietów powinny ułatwiać zrozumienie ich zawartości.\nDodatkowo, z uwagi na istnienie wielu pakietów, warto najpierw sprawdzić czy pakiet o wymyślonej przez nas nazwie już nie istnieje.\nMożna to przykładowo zrobić używając pakietu **available** [@R-available], który sprawdza przy wybrana nazwa nie jest już zajęta oraz czy nie ma ona jakiegoś niepożądanego przez nas znaczenia.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"available\")\navailable::available(\"mojpakiet\", browse = FALSE)\n```\n:::\n\n\n\n\n\n\n## Tworzenie szkieletu pakietu\n\nKolejnym krokiem jest stworzenie szkieletu pakietu, czyli zorganizowanego zbioru plików i folderów, do których później należy dodać odpowiednie informacje i funkcje.\nZnacznie w tym może pomóc pakiet [**usethis**](https://usethis.r-lib.org/) [@R-usethis], który zawiera szereg funkcji ułatwiających budowanie pakietów R.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n\n\n\n\n\nDo stworzenia szkieletu pakietu służy funkcja `create_packages()`, w której należy podać ścieżkę do nowego pakietu.\n<!-- package.skeleton()  Never use this! -->\nW tej ścieżce ostatnia nazwa folderu określa również nazwę pakietu.^[Funkcja również `create_packages()` sama tworzy nowy folder, jeżeli on wcześniej nie istniał.]\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_package(\"~/Documents/mojpakiet\")\n```\n:::\n\n\n\n\n\n\nW efekcie działania powyższej funkcji stworzony zostanie nowy folder `mojpakiet` zawierający kilka plików oraz otwarty zostanie nowy projekt RStudio zawierający ten pakiet.\nNajważniejsze nowe pliki to:\n\n1. `mojpakiet.Rproj` - plik projektu RStudio\n2. `DESCRIPTION` - plik zawierający podstawowe informacje o pakiecie\n3. `R/` - w tym pustym folderze konieczne będzie umieszczenie nowych funkcji R\n4. `NAMESPACE` - ten plik określa, między innymi, jakie funkcje są dostępne w tym pakiecie. \nTen plik i jego zawartość jest tworzona automatycznie\n\nDodatkowo w prawym górnym panelu RStudio pojawi się nowy panel \"Build\".\n\n## Dokumentacja pakietu\n\nDokumentowanie pakietu ma miejsce na wielu poziomach, począwszy od opisu pakietu w pliku `DESCRIPTION`, poprzez komentowanie kodu, dokumentację funkcji wraz z przykładami jej użycia, dokumentację danych, plik README, winiety, aż po stronę internetową pakietu.\n\n## Opis pakietu {#sec-opis-pakietu}\n\nPlik `DESCRIPTION` zawiera opis (metadane) pakietu, w tym jego nazwę, tytuł, wersję, autorów, opis, czy licencję.\n\n```yaml\nPackage: mojpakiet\nTitle: Moje Funkcje Robiace Wszystko\nVersion: 0.0.1\nAuthors@R: \n    person(given = \"Imie\",\n           family = \"Nazwisko\",\n           role = c(\"cre\", \"aut\"),\n           email = \"imie.nazwisko@example.com\")\nDescription: Tworzenie, przeliczanie i wyliczanie wszystkiego. \n    Czasami nawet więcej.\nLicense: CC0\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.2.3\n```\n\nPlik `DESCRIPTION` należy regularnie uaktualniać, np. zmieniać numer wersji po naniesionych zmianach w kodzie, czy dodawać nowych autorów, jeżeli tacy się pojawili. \n\nWięcej o tym później (@sec-metadane-pakietu).\n\n## Rozwijanie pakietu\n\n<!-- - Dodaj schemat zmian w pakiecie R -->\n\nRozwój pakietu R może opierać się na kilku poniższych krokach:\n\n1. Tworzenie/modyfikowanie kodu w folderze `R/`\n2. Używanie funkcji `devtools::load_all()`, która dodaje nowe/zmodyfikowane funkcje do środowiska R\n3. Sprawdzenie czy funkcja działa zgodnie z oczekiwaniami na kilku przykładach\n4. Dodanie testów jednostkowych na podstawie stworzonych przykładów (o tym więcej w @sec-testy-jednostkowe)\n5. Uaktualnienie dokumentacji tworzonego/modyfkowanego kodu\n6. Wygenerowanie plików z dokumentacją używając `devtools::document()`\n6. Sprawdzenie czy pakiet nie posiada żadnych problemów używając `devtools::test()` oraz `devtools::check()`\n7. Modyfikacja wersji oprogramowania w pliku `DESCRIPTION`\n8. Zapisanie zmian w kodzie w repozytorium (np. GitHub)\n9. Powtórzenie powyższych czynności przy kolejnych zmianach w kodzie\n\n::: {.callout-note appearance=\"simple\"}\n\n## ZADANIA\n\n1. Stwórz nowy pakiet R o wybranej przez siebie nazwie: zacznij od sprawdzenia czy nazwa pakietu nie jest już zajęta.\n2. Stwórz szkielet pakietu oraz uzupełnij najważniejsze informacje w pliku `DESCRIPTION`.\n:::\n\n## Tworzenie i dokumentacja funkcji {#sec-dok-fun1}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkonwersja_temp = function(temperatura_f){\n    (temperatura_f - 32) / 1.8\n}\n```\n:::\n\n\n\n\n\n\nUmieszczenie tej funkcji w nowym pakiecie R odbywa się poprzez zapisanie tego kodu jako skrypt R (np. `konwersja_temp.R`) w folderze `R/`.\n\nFunkcje zawarte w pakietach muszą także posiadać odpowiednią dokumentację, zawierającą, między innymi, tytuł funkcji, opis jej działania, wyjaśnienie kolejnych argumentów funkcji, oraz przykłady jej działania.\nLinie obejmujące dokumentację funkcji rozpoczynają się od znaków `#' `, a tworzenie dokumentacji funkcji odbywa się poprzez wypełnianie treści dla kolejnych znaczników (np. `@example` określa występowanie przykładu).\n\nPrzykładowy plik `R/konwersja_temp.R` może wyglądać następująco:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Konwersja temperatur\n#'\n#' @description Funkcja sluzaca do konwersji temperatury \n#'   ze stopni Fahrenheita do stopni Celsjusza.\n#'\n#' @param temperatura_f wektor zawierajacy wartosci temperatury \n#'   w stopniach Fahrenheita\n#'\n#' @return wektor numeryczny\n#' @export\n#'\n#' @examples\n#' konwersja_temp(75)\n#' konwersja_temp(110)\n#' konwersja_temp(0)\n#' konwersja_temp(c(0, 75, 110))\nkonwersja_temp = function(temperatura_f){\n  (temperatura_f - 32) / 1.8\n}\n```\n:::\n\n\n\n\n\n\nPierwsza linia w tym pliku określa tytuł danej funkcji.\nKolejny element rozpoczynający się od znacznika `@description` zawiera krótki opis tego, co funkcja robi. \nNastępnie zazwyczaj wypisane są wszystkie argumenty danej funkcji używając kolejnych znaczników `@param`.\nZnacznik `@return` pozwala na przekazanie informacji o tym co jest zwracane jako efekt działania funkcji.\nPrzedostatnim znacznikiem w powyższym przypadku jest `@export`. \nOznacza on, że ta funkcja będzie widoczna dla każdego użytkownika tego pakietu po użyciu `library(mojpakiet)`.\nBez tego znacznika funkcja byłaby tylko widoczna wewnątrz pakietu.\nOstatni znacznik, `@examples`, wypisuje kolejne przykłady działania funkcji.\n\n::: {.callout-note}\nPowyższy przykład nie wykorzystuje wszystkich możliwych znaczników.\nWięcej z nich można znaleźć w dyskusji na stronie <https://github.com/r-lib/roxygen2/issues/792#issuecomment-705071228>.\n:::\n\nWybór `More -> Document` w panelu \"Build\" (inaczej wywołanie funkcji `devtools::document()` lub użycie skrótu CTRL+SHIFT+D) spowoduje zbudowanie pliku dokumentacji w folderze `man`, np. `man/konwersja_temp.Rd`. \nPliki dokumentacji będą zawsze tworzone w ten sposób - nie należy ich modyfikować ręcznie.\nZbudowanie pliku dokumentacji pozwala teraz na jej podejrzenie poprzez wywołanie pliku pomocy naszej funkcji:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?konwersja_temp\n```\n:::\n\n\n\n\n\n\n## Zależności\n\nIstnieje jedna ważna różnica pomiędzy tworzeniem funkcji w skryptach a tworzeniem jej wewnątrz pakietu - w pakietach nie można używać dołączania pakietów za pomocą funkcji `library()`.\nZamiast tego możliwe jest definiowanie każdej zewnętrznej funkcji używając operatora `::`.^[Istnieją również inne możliwości, np. użycie znaczników `@import` lub `@importFrom`.]\n\nDodatkowo każda zależność z zewnętrznym pakietem musi być określona w pliku `DESCRIPTION`.\nJest to możliwe używając wpisów `Imports: ` oraz `Suggests: `, przykładowo:^[Istnieją również inne wpisy, takie jak `Depends: `, `LinkingTo: `, czy `Enhances: `.]\n\n```yaml\nImports:\n  stringr,\n  readr\nSuggests:\n  readxl\n```\n\n`Imports: ` określa pakiety, które muszą być zainstalowane, aby tworzony pakiet mógł zadziałać.\nJeżeli wymienione tutaj pakiety nie będą znajdować się na komputerze użytkownika to zostaną one automatycznie doinstalowane podczas instalacji naszego pakietu.\n`Suggests: ` wymienia pakiety, które pomagają w użytkowaniu naszego pakietu, np. takie które zawierają testowe dane.\nWymienione tutaj pakiety nie będą automatycznie doinstalowane podczas instalacji naszego pakietu.\n\n## Sprawdzanie pakietu\n\nW momencie, gdy pakiet posiada już swoje podstawowe elementy, tj. pierwsze udokumentowane funkcje oraz uzupełniony opis wraz z zależnościami warto sprawdzić czy te wszystkie elementy pakietu dobrze współgrają ze sobą.\nMożna to zrobić używając funkcji `devtools::check()` (inaczej wybór `Check` w panelu \"Build\" RStudio lub skrót CTRL+SHIFT+E).\nW efekcie tego wywołania zostanie uruchomiony szereg sprawdzeń i testów dotyczących pakietu, jego funkcji czy opisu.\nNa końcu zwrócone zostanie wypisanie liczby błędów (*error*), ostrzeżeń (*warnings*) i notatek (*notes*), poprzedzone wymienieniem każdego ich wystąpienia.\nBłędy oznaczają, że z jakiegoś powodu pakietu nie można zbudować, ostrzeżenia natomiast sugerują sytuację w której jakieś ważne elementy funkcji mogą wymagać poprawy.\nNotatki natomiast wskazują na kwestie, które użytkownik może, ale nie musi poprawić.\n\n::: {.callout-note appearance=\"simple\"}\n\n## ZADANIA\n\n1. Dodaj do swojego pakietu twoją funkcję jako plik o rozszerzeniu `.R` w folderze `R\\`.\n2. Dodaj dokumentację do swojej funkcji, w tym jej tytuł, opis, argumenty, zwracane wartości i przykłady jej użycia.\n3. Wygeneruj dokumentację dla swojego pakietu.\n4. Sprawdź czy twój pakiet nie posiada żadnych błędów, ostrzeżeń i notatek.\nW przypadku, gdy masz jakieś błędy lub ostrzeżenia, spróbuj je naprawić.\n\n*Po wykonaniu zadań będziemy mieć czas na dyskusję i pomoc w rozwiązywaniu problemów.*\n:::\n\n## Instalowanie pakietu\n\nSprawdzony pakiet, który nie zwraca błędów można zainstalować na własnym komputerze używając funkcji `devtools::install()` (inaczej wybór `Install and restart` w panelu \"Build\" RStudio lub skrót CTRL+SHIFT+B).\nW przypadku, gdy kod źródłowy tego pakietu znajduje się na platformie GitHub, inni użytkownicy mogą go zainstalować za pomocą funkcji `remotes::install_github(\"nazwa_uzytkownika_github/nazwa_pakietu\")` [@R-remotes].\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}